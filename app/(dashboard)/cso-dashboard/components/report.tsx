"use client";

import React, { useEffect, useState } from 'react';
import FilterReport from "@/components/filter";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import generateReport from "@/app/store/weekly-report";
import autoGenerateReport from "@/app/store/autogenerated-report";
import { ReportData, ReportContent } from "@/types";
import CsoFilterReport from "@/app/(dashboard)/cso-dashboard/components/filter";

const CsoReport: React.FC = () => {
    const [reportData, setReportData] = useState<ReportData | null>(null);
    const [filterReportData, setFilterReportData] = useState<ReportData | null>(null);
    const [activeTab, setActiveTab] = useState<'auto-generated' | 'filtered'>('auto-generated');
    const [loading, setLoading] = useState(true);

    const handleFilterChange = async (filters: any) => {
        setLoading(true);
        try {
            const data = await generateReport(filters);
            if (data && data.reports && data.reports.length > 0) {
                const firstReport = data.reports[0];
                if (firstReport.report_content) {
                    firstReport.report_content = parseReportContent(firstReport.report_content);
                }
                setFilterReportData(firstReport);
            }
            console.log('Generated reports data:', data);
            setActiveTab('filtered');
        } catch (error) {
            console.error('Failed to fetch filtered data:', error);
        } finally {
            setLoading(false);
        }
    };

    const parseReportContent = (reportContent: string) => {
        const cleanedContent = reportContent.replace(/```json\n|```/g, '');
        return JSON.parse(cleanedContent);
    };

    useEffect(() => {
        const fetchAutoGeneratedReport = async () => {
            setLoading(true);
            try {
                const data = await autoGenerateReport({
                    gender_ethnicity: "Muslims",
                    starting_date: '2024-07-13T16:55:48.917951',
                    ending_date: '2024-07-13T16:55:48.917951',
                });
                if (data && data.reports && data.reports.length > 0) {
                    const firstReport = data.reports[0];
                    if (firstReport.report_content) {
                        firstReport.report_content = parseReportContent(firstReport.report_content);
                    }
                    setReportData(firstReport);
                }
                console.log('Fetched auto-generated reports data:', data);
            } catch (error) {
                console.error('Failed to fetch auto-generated reports:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchAutoGeneratedReport();
    }, []);

    useEffect(() => {
        console.log('Report data:', reportData);
    }, [reportData]);

    const renderArticleCard = (article: any, index: number) => (
        <Card key={index} className="p-4 border rounded-lg shadow hover:bg-gray-50">
            <a
                href={article.url}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 font-semibold hover:underline"
            >
                {article.title}
            </a>
            <p><strong>Website:</strong> {article.website_name}</p>
            <p><strong>Date:</strong> {article.date}</p>
            <p><strong>Location:</strong> {article.location_or_provenance}</p>
            <p><strong>Sector:</strong> {article.sector}</p>
            <p><strong>Language:</strong> {article.language}</p>
            <p><strong>Reasoning Discrimination:</strong> {article.reasoning_discrimination}</p>
            <p><strong>Reasoning Hateful:</strong> {article.reasoning_hateful}</p>
        </Card>
    );

    return (
        <div className="flex-1 space-y-4 p-4 pt-6 md:p-8">
            <h2 className="text-3xl font-bold tracking-tight mb-6">Cso Reports</h2>
            <Tabs defaultValue="auto-generated" value={activeTab} onValueChange={(value) => setActiveTab(value as 'auto-generated' | 'filtered')}>
                <TabsList className="mb-4">
                    <TabsTrigger value="auto-generated">Auto-Generated Report</TabsTrigger>
                    <TabsTrigger value="filtered">Filtered Report</TabsTrigger>
                </TabsList>
                <TabsContent value="auto-generated">
                    {loading ? (
                        <p className="text-center text-gray-500">Loading...</p>
                    ) : reportData ? (
                        <Card className="border rounded-lg shadow-lg">
                            <CardHeader className="bg-blueGem-300 p-4 rounded-t-lg">
                                <CardTitle className="text-2xl font-semibold">Auto-Generated Report</CardTitle>
                            </CardHeader>
                            <CardContent className="p-6">
                                <h1 className="text-xl font-bold mb-4">Report ID: {reportData.id}</h1>
                                <div className="space-y-2">
                                    <p><strong>Gender/Ethnicity:</strong> {reportData.gender_ethnicity}</p>
                                    <p><strong>Period:</strong> {reportData.starting_date} to {reportData.ending_date}</p>
                                    <p><strong>Language:</strong> {reportData.language}</p>
                                    <p><strong>Area:</strong> {reportData.area}</p>
                                    <p><strong>Sector:</strong> {reportData.sector}</p>
                                    <p><strong>Created At:</strong> {new Date(reportData.created_at).toLocaleString()}</p>
                                </div>
                                <div className="mt-6">
                                    <h2 className="text-lg font-semibold mb-2">Newsletter Summary</h2>
                                    <p className="mb-4">{reportData.report_content?.newsletter_summary?.summary}</p>
                                    <h3 className="text-lg font-medium mb-2">Articles</h3>
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                        {reportData.report_content?.newsletter_summary?.articles?.map((article, index) => (
                                            renderArticleCard(article, index)
                                        ))}
                                    </div>
                                </div>
                            </CardContent>
                        </Card>
                    ) : (
                        <p className="text-center text-gray-500">No report found</p>
                    )}
                </TabsContent>
                <TabsContent value="filtered">
                    <div className={"w-full flex justify-end"}>
                    <CsoFilterReport onFilterChange={handleFilterChange} />
                    </div>
                    {loading ? (
                        <p className="text-center text-gray-500">Loading...</p>
                    ) : filterReportData ? (
                        <Card className="border rounded-lg shadow-lg mt-4">
                            <CardHeader className="bg-gray-100 p-4 rounded-t-lg">
                                <CardTitle className="text-2xl font-semibold">Filtered Report</CardTitle>
                            </CardHeader>
                            <CardContent className="p-6">
                                <h1 className="text-xl font-bold mb-4">Report ID: {filterReportData.id}</h1>
                                <div className="space-y-2">
                                    <p><strong>Gender/Ethnicity:</strong> {filterReportData.gender_ethnicity}</p>
                                    <p><strong>Period:</strong> {filterReportData.starting_date} to {filterReportData.ending_date}</p>
                                    <p><strong>Language:</strong> {filterReportData.language}</p>
                                    <p><strong>Area:</strong> {filterReportData.area}</p>
                                    <p><strong>Sector:</strong> {filterReportData.sector}</p>
                                    <p><strong>Created At:</strong> {new Date(filterReportData.created_at).toLocaleString()}</p>
                                </div>
                                <div className="mt-6">
                                    <h2 className="text-lg font-semibold mb-2">Newsletter Summary</h2>
                                    <p className="mb-4">{filterReportData.report_content?.newsletter_summary?.summary}</p>
                                    <h3 className="text-lg font-medium mb-2">Articles</h3>
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                        {filterReportData.report_content?.newsletter_summary?.articles?.map((article, index) => (
                                            renderArticleCard(article, index)
                                        ))}
                                    </div>
                                </div>
                            </CardContent>
                        </Card>
                    ) : (
                        <p className="text-center text-gray-500">No report found</p>
                    )}
                </TabsContent>
            </Tabs>
        </div>
    );
};

export default CsoReport;
